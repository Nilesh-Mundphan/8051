C51 COMPILER V9.56.0.0   SERIAL                                                            10/09/2016 13:02:07 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Objects\serial.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\serial.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\lib;.\modules) DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\serial.lst) TABS(2) OBJECT(.\Objects\serial.obj)

line level    source

   1          #include "system.h"
   2          #include "delay.h"
   3          #include "serial.h"
   4          #define RXBUFFERMAX 32
   5          
   6          volatile char rxBuffer[RXBUFFERMAX];
   7          volatile int rx_Buffer_Head=-1,rx_Buffer_Tail=-1;
   8          
   9          void serial_init(unsigned int baud_rate)
  10          {
  11   1        unsigned int BAUD;
  12   1        if(baud_rate == 9600)
  13   1          BAUD=0xFD;
  14   1      
  15   1        TMOD=0x20;
  16   1        TH1=BAUD;
  17   1        SCON=0x50;
  18   1        IE=0x90;
  19   1        TR1=1;
  20   1      }
  21          
  22          void serial_write(char ch)
  23          {
  24   1        SBUF=ch;
  25   1        while(TI==0);
  26   1          TI=0;
  27   1      }
  28          
  29          void serial_print(const char *str)
  30          {
  31   1          while(*str)
  32   1            serial_write(*str++);
  33   1      }
  34          
  35          unsigned int serial_available(void)
  36          {
  37   1        if(rx_Buffer_Head==-1) 
  38   1            return 0;
  39   1        if(rx_Buffer_Head < rx_Buffer_Tail)
  40   1            return(rx_Buffer_Tail - rx_Buffer_Head + 1);
  41   1        else if(rx_Buffer_Head > rx_Buffer_Tail)
  42   1            return (RXBUFFERMAX - rx_Buffer_Head + rx_Buffer_Tail + 1);
  43   1        else
  44   1          return 1;
  45   1      }
  46          char serial_read(void)
  47          {
  48   1          char ch;
  49   1          if(rx_Buffer_Head == -1)
  50   1          return 0;
  51   1            ch=rxBuffer[rx_Buffer_Head];
  52   1        
  53   1          if(rx_Buffer_Head == rx_Buffer_Tail)
  54   1          {
C51 COMPILER V9.56.0.0   SERIAL                                                            10/09/2016 13:02:07 PAGE 2   

  55   2              rx_Buffer_Head = rx_Buffer_Tail = -1;
  56   2          }
  57   1          else
  58   1          {
  59   2            rx_Buffer_Head++;
  60   2            if(rx_Buffer_Head == RXBUFFERMAX)
  61   2            rx_Buffer_Head=0;
  62   2          }
  63   1        return ch;
  64   1      }
  65          
  66          void serial_flush(void)
  67          {
  68   1          while(serial_available())
  69   1            serial_read();
  70   1      }
  71          
  72          void serial_interrupt(void) interrupt 4
  73          {
  74   1        if(RI)
  75   1          {
  76   2        char rxData=SBUF;
  77   2            RI=0;
  78   2          if((rx_Buffer_Tail == RXBUFFERMAX-1 && (rx_Buffer_Head == 0)) || ((rx_Buffer_Tail + 1) == rx_Buffer_Head
             -))
  79   2            {
  80   3              rx_Buffer_Head++;
  81   3            }
  82   2            
  83   2            if(rx_Buffer_Head == RXBUFFERMAX || rx_Buffer_Head == -1)
  84   2              rx_Buffer_Head=0;
  85   2            
  86   2            if(rx_Buffer_Tail == RXBUFFERMAX - 1) 
  87   2                rx_Buffer_Tail=0;
  88   2            else 
  89   2                rx_Buffer_Tail++;
  90   2            rxBuffer[rx_Buffer_Tail]=rxData;
  91   2          }
  92   1      }
  93          
  94          void serial_responce(char *str,int timeout){
  95   1          int delay=0,i=0;
  96   1        while(timeout > delay)
  97   1        {
  98   2          while(serial_available() > 0)
  99   2          {
 100   3            char ch=serial_read();
 101   3            str[i++]=ch;
 102   3          }
 103   2          delay_ms(1);
 104   2          delay++;
 105   2        }
 106   1        str[i]='\0';
 107   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36      14
C51 COMPILER V9.56.0.0   SERIAL                                                            10/09/2016 13:02:07 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
